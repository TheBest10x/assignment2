
public class ArrayStack<T> implements Stack<T> {
    private static final int DEFAULT_CAPACITY = 10;
    private Object[] data;
    private int top;


    public ArrayStack() {
        this(DEFAULT_CAPACITY);
    }


    public ArrayStack(int capacity) {
        if (capacity <= 0) {
            throw new IllegalArgumentException("Capacity must be greater than zero.");
        }
        data = new Object[capacity];
        top = -1;
    }


    @Override
    public void push(T item) throws IllegalStateException {
        if (isFull()) {
            throw new IllegalStateException("Stack is full.");
        }
        data[++top] = item;
    }


    @Override
    public T pop() throws IllegalStateException {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty.");
        }
        T item = (T) data[top];
        data[top--] = null;
        return item;
    }


    @Override
    public T peek() throws IllegalStateException {
        if (isEmpty()) {
            throw new IllegalStateException("Stack is empty.");
        }
        return (T) data[top];
    }


    @Override
    public boolean isEmpty() {
        return top == -1;
    }


    @Override
    public int length() {
        return top + 1;
    }


    public boolean isFull() {
        return top == data.length - 1;
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("[");
        for (int i = 0; i <= top; i++) {
            sb.append(data[i]);
            if (i < top) {
                sb.append(", ");
            }
        }
        sb.append("]");
        return sb.toString();
    }
}
// The book was used as a reference with the help of CHAT GPT to understand the code.
